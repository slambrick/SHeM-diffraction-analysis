window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "shem_spot_profile", "modulename": "shem_spot_profile", "kind": "module", "doc": "<h1 id=\"shem-diffraction-analysis\">SHeM Diffraction Analysis</h1>\n\n<p>Created on Sat Oct 15 09:51:59 2022</p>\n\n<p>@author: Sam Lambrick 2022-23 <br />\n@contributions: Ke Wang 2022-23</p>\n\n<p>A module for importing, analysing, and plotting SHeM spot profile data.</p>\n\n<p>The 2D Gaussian function is based on <a href=\"https://stackoverflow.com/questions/21566379/fitting-a-2d-gaussian-function-using-scipy-optimize-curve-fit-valueerror-and-m\">this StackOverflow post</a>.</p>\n\n<p>A model for the Parallel speed ratio is used from <a href=\"http://doi.org/10.1016/j.ultramic.2019.112833\">M Bergin 2017</a>.\nand the data that was used to fit to Bergin's model is from <a href=\"http://doi.org/10.1063/1.434448\">Toennies &amp; Winkelman</a>.</p>\n\n<p>SHeM (design for Cambridge A-SHeM):\n    <a href=\"http://doi.org/10.1016/j.nimb.2014.06.028\">http://doi.org/10.1016/j.nimb.2014.06.028</a></p>\n\n<p>2D diffraction with SHeM:\n    <a href=\"http://doi.org/coming_soon\">http://doi.org/coming_soon</a>!</p>\n"}, {"fullname": "shem_spot_profile.m_u", "modulename": "shem_spot_profile", "qualname": "m_u", "kind": "variable", "doc": "<p>The atomic mass unit in kg.</p>\n", "default_value": "1.6605e-27"}, {"fullname": "shem_spot_profile.m_He", "modulename": "shem_spot_profile", "qualname": "m_He", "kind": "variable", "doc": "<p>The mass of a helium-4 atom in kg.</p>\n", "default_value": "6.642e-27"}, {"fullname": "shem_spot_profile.k_B", "modulename": "shem_spot_profile", "qualname": "k_B", "kind": "variable", "doc": "<p>The Boltzmann constant in JK<sup>-1</sup></p>\n", "default_value": "1.380649e-23"}, {"fullname": "shem_spot_profile.h", "modulename": "shem_spot_profile", "qualname": "h", "kind": "variable", "doc": "<p>The Planck constant in Js.</p>\n", "default_value": "6.62607015e-34"}, {"fullname": "shem_spot_profile.energy_from_T", "modulename": "shem_spot_profile", "qualname": "energy_from_T", "kind": "function", "doc": "<p>Calculates incident helium energy in J from the beam temperature  - \nassumes a pure beam.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>T</strong> (float, int, numpy.ndarray):\nThe beam temperature in K.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>E</strong> (float, numpy.ndarray):\nThe average energy of helium atoms in the beam, in J.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">T</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.effective_T", "modulename": "shem_spot_profile", "qualname": "effective_T", "kind": "function", "doc": "<p>Calculates the 'effective temperature' for the beam, that is the\nequivalent temperature for a pure helium beam with this energy. Accepts\nenergy in meV.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>E</strong> (float, int, numpy.ndarray):\nThe average energy of helium atoms in a beam, in J.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>T</strong> (float, numpy.ndarray):\nThe temperature a pure helium beam would have to be at to give the\natoms in the beam an energy of <code>E</code>. In units of K.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">E</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.speed_ratio", "modulename": "shem_spot_profile", "qualname": "speed_ratio", "kind": "function", "doc": "<p>Calculates the parallel speed ratio for the specified nozzle\npressure and diameter for a helium beam based on an emprical fit.</p>\n\n<p>The fit is from <a href=\"http://doi.org/10.1016/j.ultramic.2019.112833\">M.Bergin 2018</a>\nand is to data/simulation from <a href=\"http://doi.org/10.1063/1.434448\">Toennies &amp; Winkelman</a>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>P_0</strong> (float, int, numpy.ndarray):\nPressure of the beam, specified in torr.</li>\n<li><strong>d_noz</strong> (float, int, numpy.ndarray):\nDiameter of the nozzle, specified in cm.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sR</strong> (float, numpy.ndarray):\nThe predicted terminal, parallel speed ratio.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">P_0</span>, </span><span class=\"param\"><span class=\"n\">d_noz</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.morse_V", "modulename": "shem_spot_profile", "qualname": "morse_V", "kind": "function", "doc": "<p>Calculates a corrugated Morse potential, from eq. 1.2 &amp; 1.3 <a href=\"https://doi.org/10.1063/1.449297\">Celli et al.\n1995</a>.</p>\n\n<p>$$ Q(x,y) = h \\left( \\cos \\dfrac{2\\pi x}{a} + \\cos \\dfrac{2\\pi y}{a} \\right)$$\n$$ V(x, y, z) = D_0 e^{-2 \\alpha [z - Q(x, y)]} - 2 D_0 e^{-\\alpha_1 z} $$</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>z</strong> (float, int, numpy.ndarray):\nThe height above the surface, in nm.</li>\n<li><strong>x</strong> (float, int, numpy.ndarray):\nx position on the surface, in nm.</li>\n<li><strong>y</strong> (float, int, numpy.ndarray):\ny position on the surface, in nm.</li>\n<li><strong>params</strong> (5 tupe of float/int, optional):\nParameters for the Morse potential specified as a 5 element tuple,\n(D<sub>0</sub>, \u03b1, \u03b1<sub>1</sub>, h, a). The default is (8.03, 1.35, 1.08, 0.102, 4).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>V</strong> (float, numpy.ndarray):\nValue of the potential.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">8.03</span><span class=\"p\">,</span> <span class=\"mf\">1.35</span><span class=\"p\">,</span> <span class=\"mf\">1.08</span><span class=\"p\">,</span> <span class=\"mf\">0.102</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.twoD_Gaussian", "modulename": "shem_spot_profile", "qualname": "twoD_Gaussian", "kind": "function", "doc": "<p>A two dimensional gaussian function for fitting to diffraction peaks.\nThe background is defined in the <code>background</code> function.</p>\n\n<p>$$ a = \\dfrac{\\cos^2 \\theta}{2 \\sigma_x^2} + \\dfrac{\\sin^2 \\theta}{2\\sigma_y^2}$$\n$$ b = -\\dfrac{\\sin 2 \\theta}{4\\sigma_x^2} + \\dfrac{\\sin 2 \\theta}{4\\sigma_y^2}$$\n$$ c =  \\dfrac{\\sin^2 \\theta}{2 \\sigma_x^2} + \\dfrac{\\cos^2 \\theta}{2\\sigma_y^2}$$\n$$ I(x, y) = B + A e^{-a(x - x_0)^2 - 2b(x-x_0)(y-y_0) - c(y - y_0)^2}$$</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xy</strong> (2 tuple of float, int, numpy.ndarray):\ntuple of x &amp; y coordinates.</li>\n<li><strong>amplitude</strong> (float, int):\nheight of the Gaussian.</li>\n<li><strong>xo</strong> (float, int):\nx coordinate of the centre.</li>\n<li><strong>yo</strong> (float, int):\ny coordinate of the centre.</li>\n<li><strong>sigma_x</strong> (float, int):\nx direction standard deviation.</li>\n<li><strong>sigma_y</strong> (float, int):\ny direction standard deviation.</li>\n<li><strong>theta</strong> (float, int):\nclockwise rotation (rad) of the Gaussian.</li>\n<li><strong>f</strong> (float, int):\n1st Coefficient for the background.</li>\n<li><strong>g</strong> (float, int):\n2nd Coefficient for the background.</li>\n<li><strong>h</strong> (float, int):\n3rd Coefficient for the background.</li>\n<li><strong>k</strong> (float, int):\n4th Coefficient for the background.</li>\n<li><strong>l</strong> (float, int):\n5th Coefficient for the background.</li>\n<li><strong>m</strong> (float, int):\n6th Coefficient for the background.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>popt</strong> (scipy fitting output):\nDESCRIPTION</li>\n<li><strong>pconv</strong> (scipy fitting output):\nDESCRIPTION.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xy</span>, </span><span class=\"param\"><span class=\"n\">amplitude</span>, </span><span class=\"param\"><span class=\"n\">xo</span>, </span><span class=\"param\"><span class=\"n\">yo</span>, </span><span class=\"param\"><span class=\"n\">sigma_x</span>, </span><span class=\"param\"><span class=\"n\">sigma_y</span>, </span><span class=\"param\"><span class=\"n\">theta</span>, </span><span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">g</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">m</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.background", "modulename": "shem_spot_profile", "qualname": "background", "kind": "function", "doc": "<p>2nd order 2D polynomial background function.</p>\n\n<p>$$ b(x,y) = f + gx + hy + kxy + lx^2 + my^2 $$</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>xy</strong> (tuple):\nTuple of <code>(x,y)</code> values, either single numerical values or \nnumpy.ndarray.</li>\n<li><strong>f</strong> (float, int):\n1st Coefficient for the background..</li>\n<li><strong>g</strong> (float, int):\n2nd Coefficient for the background..</li>\n<li><strong>h</strong> (float, int):\n3rd Coefficient for the background..</li>\n<li><strong>k</strong> (float, int):\n4th Coefficient for the background..</li>\n<li><strong>l</strong> (float, int):\n5th Coefficient for the background..</li>\n<li><strong>m</strong> (float, int):\n6th Coefficient for the background..</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>b</strong> (float, numpy.ndarray):\nValue of the 2nd order polynomial.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xy</span>, </span><span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">g</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">m</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.theta_of_z", "modulename": "shem_spot_profile", "qualname": "theta_of_z", "kind": "function", "doc": "<p>Calculates the detection angle theta from the z position in mm\nfor the 1st gneration angular resolution pinhole plate for the Cambridge \nA-SHeM. plate specification: #C06</p>\n\n<p>Can also calculate the detection angle from the z position in mm for the \nmixed gas pinhole plate for the Cambridge B-SHeM. plate specification: #Z07</p>\n\n<p>Alternaticly: calculates the detection angle, theta, from the z position in mm for a\n45deg incidnece and 45deg detection pinhole plate with the specified design\nworking distance WD</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">plate</span><span class=\"o\">=</span><span class=\"s1\">&#39;C06&#39;</span>, </span><span class=\"param\"><span class=\"n\">WD</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.load_z_scans", "modulename": "shem_spot_profile", "qualname": "load_z_scans", "kind": "function", "doc": "<p>Loads a series of z scans taken at different aximulath orientations. The\norientations need to provied seperatly as they are not stored in the data\nfiles. This file is written specifically for the Cambridge A-SHeM data \ntaken between 2020-23.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>files</strong> (array_like of str):\nThe files that store the z scan data.</li>\n<li><strong>z_zero</strong> (float, int, optional):\nThe \"z zero\": the value of z in stage coordinates that corresponds to \na distance of 0 from the pinhole plate. The default is 3.41e6.</li>\n<li><strong>instrument</strong> (str, optional):\nWhich instrument? \"ashem\" or \"bshem\". The default is 'ashem'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>zs</strong> (numpy.ndarray):\nThe z values, in mm, for these z scans.</li>\n<li><p><strong>meas</strong> (dict):</p></li>\n<li><p><strong>example_pos</strong> (numpy.ndarray):</p></li>\n<li><p><strong>Note the contents of a Z-scan file for A-SHeM</strong> ():\n<code>z_positions</code>, <code>inputs</code>, <code>detector_mode</code>, <code>N_dwell</code>, <code>sampling_period</code>, <code>date_time</code>\n<code>det_params</code>, <code>p1</code>, <code>p2</code>, <code>p3</code>, <code>p_srce</code>, <code>p_diff</code>, <code>p_smpl</code>, <code>p_det</code>, <code>pause</code>\n<code>rotation_angle</code>, <code>counts</code>, <code>errors</code>, <code>finish_time</code>, <code>scan_time</code></p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">files</span>, </span><span class=\"param\"><span class=\"n\">z_zero</span><span class=\"o\">=</span><span class=\"mf\">3410000.0</span>, </span><span class=\"param\"><span class=\"n\">instrument</span><span class=\"o\">=</span><span class=\"s1\">&#39;ashem&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.load_z_scans_ashem", "modulename": "shem_spot_profile", "qualname": "load_z_scans_ashem", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">files_ind</span>, </span><span class=\"param\"><span class=\"n\">path_name</span>, </span><span class=\"param\"><span class=\"n\">z_zero</span><span class=\"o\">=</span><span class=\"mf\">3410000.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.load_z_scan_ashem_txt", "modulename": "shem_spot_profile", "qualname": "load_z_scan_ashem_txt", "kind": "function", "doc": "<p>Reads in a single z scan for the A-SHeM where data has been saves in\ntext files rather than in .mat files. Only loads a limited amount of\nmetadata.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span>, </span><span class=\"param\"><span class=\"n\">z_zero</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.load_z_scans_bshem", "modulename": "shem_spot_profile", "qualname": "load_z_scans_bshem", "kind": "function", "doc": "<p>Reads in z scans for the B-SHeM.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">files_ind</span>, </span><span class=\"param\"><span class=\"n\">path_name</span>, </span><span class=\"param\"><span class=\"n\">z_zero</span><span class=\"o\">=</span><span class=\"mf\">2500000000.0</span>, </span><span class=\"param\"><span class=\"n\">detector</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.load_z_scans_bshem_txt", "modulename": "shem_spot_profile", "qualname": "load_z_scans_bshem_txt", "kind": "function", "doc": "<p>Reads in z scans for the A-SHeM where data has been saves in text files\nrather than in .mat files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">files_ind</span>, </span><span class=\"param\"><span class=\"n\">path_name</span>, </span><span class=\"param\"><span class=\"n\">z_zero</span>, </span><span class=\"param\"><span class=\"n\">detector</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.add_scale", "modulename": "shem_spot_profile", "qualname": "add_scale", "kind": "function", "doc": "<p>A function to add an extra x scale to the polar plot with the provided\naxis handle. The offset determines where the scale is drawn.</p>\n\n<p>Inputs:\n    ax - axis handle on which to add an extra scale\n    label - text label for the new scale\n    x_offset - how far to the left of the plot to add the new scale</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">x_offset</span><span class=\"o\">=</span><span class=\"mf\">0.08</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.find_diff_peak", "modulename": "shem_spot_profile", "qualname": "find_diff_peak", "kind": "function", "doc": "<p>Try to fit a 2D gaussian to the diffraction peak</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">kx</span>, </span><span class=\"param\"><span class=\"n\">ky</span>, </span><span class=\"param\"><span class=\"n\">plotit</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile", "modulename": "shem_spot_profile", "qualname": "SpotProfile", "kind": "class", "doc": "<p>Contains results on a spot profile SHeM measurement (currently\nloaded in from a series of z-scans) along with data analysis and plotting\nfunctions.</p>\n\n<p>...</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>z</strong> (2D numpy.ndarray):\nz positions.</li>\n<li><strong>theta</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>alpha_rotator</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>alpha</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>alpha_step</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>signal</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>kz</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>DK</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>kx</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>ky</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>chosen_pos</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>example_alpha</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>example_positions</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>incident_angle</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>alpha_zero</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>T</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n<li><strong>E</strong> (2D numpy.ndarray):\nDESCRIPTION.</li>\n</ul>\n"}, {"fullname": "shem_spot_profile.SpotProfile.__init__", "modulename": "shem_spot_profile", "qualname": "SpotProfile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">alpha_rotator</span>, </span><span class=\"param\"><span class=\"n\">I</span>, </span><span class=\"param\"><span class=\"n\">plate</span><span class=\"o\">=</span><span class=\"s1\">&#39;C06&#39;</span>, </span><span class=\"param\"><span class=\"n\">WD</span><span class=\"o\">=</span><span class=\"mi\">2</span></span>)</span>"}, {"fullname": "shem_spot_profile.SpotProfile.z", "modulename": "shem_spot_profile", "qualname": "SpotProfile.z", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.theta", "modulename": "shem_spot_profile", "qualname": "SpotProfile.theta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.alpha_rotator", "modulename": "shem_spot_profile", "qualname": "SpotProfile.alpha_rotator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.alpha", "modulename": "shem_spot_profile", "qualname": "SpotProfile.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.alpha_step", "modulename": "shem_spot_profile", "qualname": "SpotProfile.alpha_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.signal", "modulename": "shem_spot_profile", "qualname": "SpotProfile.signal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.kz", "modulename": "shem_spot_profile", "qualname": "SpotProfile.kz", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.DK", "modulename": "shem_spot_profile", "qualname": "SpotProfile.DK", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.kx", "modulename": "shem_spot_profile", "qualname": "SpotProfile.kx", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.ky", "modulename": "shem_spot_profile", "qualname": "SpotProfile.ky", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.chosen_pos", "modulename": "shem_spot_profile", "qualname": "SpotProfile.chosen_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.example_alpha", "modulename": "shem_spot_profile", "qualname": "SpotProfile.example_alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.example_positions", "modulename": "shem_spot_profile", "qualname": "SpotProfile.example_positions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.incident_angle", "modulename": "shem_spot_profile", "qualname": "SpotProfile.incident_angle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.alpha_zero", "modulename": "shem_spot_profile", "qualname": "SpotProfile.alpha_zero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.T", "modulename": "shem_spot_profile", "qualname": "SpotProfile.T", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.E", "modulename": "shem_spot_profile", "qualname": "SpotProfile.E", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "shem_spot_profile.SpotProfile.import_ashem", "modulename": "shem_spot_profile", "qualname": "SpotProfile.import_ashem", "kind": "function", "doc": "<p>Loads an experimental spot profile from a series of z scan data\nfiles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">file_ind</span>, </span><span class=\"param\"><span class=\"n\">dpath</span>, </span><span class=\"param\"><span class=\"n\">alphas</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">298</span>, </span><span class=\"param\"><span class=\"n\">alpha_zero</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">z_zero</span><span class=\"o\">=</span><span class=\"mf\">3410000.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.import_ashem_txt", "modulename": "shem_spot_profile", "qualname": "SpotProfile.import_ashem_txt", "kind": "function", "doc": "<p>Loads an expreimental spot profile from the text file data format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">fname</span>, </span><span class=\"param\"><span class=\"n\">dpath</span>, </span><span class=\"param\"><span class=\"n\">alpha_zero</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.import_bshem", "modulename": "shem_spot_profile", "qualname": "SpotProfile.import_bshem", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">file_ind</span>,</span><span class=\"param\">\t<span class=\"n\">dpath</span>,</span><span class=\"param\">\t<span class=\"n\">alphas</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">298</span>,</span><span class=\"param\">\t<span class=\"n\">alpha_zero</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">z_zero</span><span class=\"o\">=</span><span class=\"mf\">2500000000.0</span>,</span><span class=\"param\">\t<span class=\"n\">detector</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.import_ray", "modulename": "shem_spot_profile", "qualname": "SpotProfile.import_ray", "kind": "function", "doc": "<p>Import ray tracing simulation of a spot profile diffraction scan.\nNote that this is for a simualtion of the first generation angular\nresolution pinhole plate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">data_dir</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">298</span>, </span><span class=\"param\"><span class=\"n\">alpha_zero</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">plate</span><span class=\"o\">=</span><span class=\"s1\">&#39;C06&#39;</span>, </span><span class=\"param\"><span class=\"n\">WD</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.import_previous", "modulename": "shem_spot_profile", "qualname": "SpotProfile.import_previous", "kind": "function", "doc": "<p>Imports the diffraction data from a previously saved diffraction \ndata set - saved by save_to_text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.get_alpha_range", "modulename": "shem_spot_profile", "qualname": "SpotProfile.get_alpha_range", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.save_to_text", "modulename": "shem_spot_profile", "qualname": "SpotProfile.save_to_text", "kind": "function", "doc": "<p>Saves the object to a text file for further analysis or saving for\nlater without import from the raw z scans.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.select_by_var", "modulename": "shem_spot_profile", "qualname": "SpotProfile.select_by_var", "kind": "function", "doc": "<p>Select a line scan of the data according to a specific value of one\nof the parameters, if the exact value is not found the closest value is\nused.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.wrap_around", "modulename": "shem_spot_profile", "qualname": "SpotProfile.wrap_around", "kind": "function", "doc": "<p>Wraps a data set around the full 360deg, i.e. to make a 360deg plot\nof an incomplete data set, e.g. a 90deg data set. Returns the data\nas a new object.\nBe aware that this method assumes that the step size in alpha is a\nfactor of the symmetry factor, e.g. 1, 1.25, 2.5, 5, 7.5, 10deg \nin 60deg or 90deg symmetry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">symmetry</span>, </span><span class=\"param\"><span class=\"n\">crop</span><span class=\"o\">=</span><span class=\"s1\">&#39;end&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.crop_alpha", "modulename": "shem_spot_profile", "qualname": "SpotProfile.crop_alpha", "kind": "function", "doc": "<p>Crops the data according to a specified range of alpha values.\nReturns the data as a new object?</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">alpha_min</span>, </span><span class=\"param\"><span class=\"n\">alpha_max</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.select_alpha", "modulename": "shem_spot_profile", "qualname": "SpotProfile.select_alpha", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">alpha</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.select_theta", "modulename": "shem_spot_profile", "qualname": "SpotProfile.select_theta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">theta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.select_z", "modulename": "shem_spot_profile", "qualname": "SpotProfile.select_z", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.select_DK", "modulename": "shem_spot_profile", "qualname": "SpotProfile.select_DK", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">DK</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.line_plot", "modulename": "shem_spot_profile", "qualname": "SpotProfile.line_plot", "kind": "function", "doc": "<p>Produce a plot of one line of the data set, selected for the\nspecified value of the specified variable.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">xvar</span>,</span><span class=\"param\">\t<span class=\"n\">var</span>,</span><span class=\"param\">\t<span class=\"n\">value</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logplot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rect</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.line_plot_raw", "modulename": "shem_spot_profile", "qualname": "SpotProfile.line_plot_raw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logplot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rect</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.line_plot_diffraction", "modulename": "shem_spot_profile", "qualname": "SpotProfile.line_plot_diffraction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logplot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rect</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.line_plot_theta", "modulename": "shem_spot_profile", "qualname": "SpotProfile.line_plot_theta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logplot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rect</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.line_plot_alpha", "modulename": "shem_spot_profile", "qualname": "SpotProfile.line_plot_alpha", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">z</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logplot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rect</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.15</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.calc_dK", "modulename": "shem_spot_profile", "qualname": "SpotProfile.calc_dK", "kind": "function", "doc": "<p>Calculates the in plane momentum transfer for the data file and the\nprojected in plane momentum transfer (psuedo) k<sub>x</sub>, \nk<sub>y</sub>. Values are calculated in nm<sup>-1</sup>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.set_alpha_zero", "modulename": "shem_spot_profile", "qualname": "SpotProfile.set_alpha_zero", "kind": "function", "doc": "<p>Sets the correct 0 for the azimuthal angle such that 0 lies along\none of the principle azimuths. </p>\n\n<p>You will probably want to plot the data first to identify a principle\nazimuth, then you can set the <code>alpha_zero</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>alpha_zero</strong> (int, float, optional):\nThe value of alpha that is to be set to be 0. The default is 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Setting the initial value of \u03b1 = 40deg to be along a principle azimuth\nfor your dataset <code>my_data</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_data</span><span class=\"o\">.</span><span class=\"n\">set_alpha_zero</span><span class=\"p\">(</span><span class=\"n\">alpha_zero</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">alpha_zero</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.shem_cartesian_plot", "modulename": "shem_spot_profile", "qualname": "SpotProfile.shem_cartesian_plot", "kind": "function", "doc": "<p>Plots the 2D diffraction pattern on Cartesian coordinates with alpha\non the x axis and the specified variable on the y axis.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>var</strong> (str):\nThe name of the variable to plot on the y-axis, e.g. .</li>\n<li><strong>colourmap</strong> (matplotlib.colors.ListedColormap, optional):\nThe colormap to use in the plot. The default is cm.viridis.</li>\n<li><strong>figsize</strong> (array_like, optional):\nFigure size in inches. The default is [6,4].</li>\n<li><strong>rasterized</strong> (bool, optional):\nShould rasterized be used when creating the plot, False will\nincrease the resource use. The default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>fig</strong> (matplotlib.figure.Figure):\nMatplotlib figure object for the plot</li>\n<li><strong>ax1</strong> (matplotlib.axes._axes.Axes):\nMatplotlib axis object for the plot</li>\n<li><strong>mesh1</strong> (matplotlib.collections.QuadMesh):\nMatplotlib mesh object returned from <code>pcolorplot</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">var</span>,</span><span class=\"param\">\t<span class=\"n\">colourmap</span><span class=\"o\">=&lt;</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">ListedColormap</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rasterized</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.shem_polar_plot", "modulename": "shem_spot_profile", "qualname": "SpotProfile.shem_polar_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">var</span>,</span><span class=\"param\">\t<span class=\"n\">colourmap</span><span class=\"o\">=&lt;</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">ListedColormap</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_location</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rasterized</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">DK_invert</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">logplot</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.shem_diffraction_plot", "modulename": "shem_spot_profile", "qualname": "SpotProfile.shem_diffraction_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">colourmap</span><span class=\"o\">=&lt;</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">ListedColormap</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_location</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rasterized</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">DK_invert</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">x_offset</span><span class=\"o\">=</span><span class=\"mf\">0.08</span>,</span><span class=\"param\">\t<span class=\"n\">DK_max</span><span class=\"o\">=</span><span class=\"mi\">85</span>,</span><span class=\"param\">\t<span class=\"n\">logplot</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.shem_raw_plot", "modulename": "shem_spot_profile", "qualname": "SpotProfile.shem_raw_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">colourmap</span><span class=\"o\">=&lt;</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">ListedColormap</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_location</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rasterized</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">x_offset</span><span class=\"o\">=</span><span class=\"mf\">0.08</span>,</span><span class=\"param\">\t<span class=\"n\">logplot</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">z_max</span><span class=\"o\">=</span><span class=\"mi\">7</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.filter_by_var", "modulename": "shem_spot_profile", "qualname": "SpotProfile.filter_by_var", "kind": "function", "doc": "<p>Filters the data above or below the specified value for the\nspecified variable. direction may be 'above' or 'below'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">direction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.grid_interpolate", "modulename": "shem_spot_profile", "qualname": "SpotProfile.grid_interpolate", "kind": "function", "doc": "<p>Produces a 2D cartesian grid of the data for the provided kx and ky\nvectors.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">kx</span>, </span><span class=\"param\"><span class=\"n\">ky</span>, </span><span class=\"param\"><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">101</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.interpolated_plot", "modulename": "shem_spot_profile", "qualname": "SpotProfile.interpolated_plot", "kind": "function", "doc": "<p>Produce an interpolated plot of the data with N points along the\nkx and ky axes. Useful for checking the output of interpolation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">kx</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">ky</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">101</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">limiting_circle</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.shift_centre", "modulename": "shem_spot_profile", "qualname": "SpotProfile.shift_centre", "kind": "function", "doc": "<p>Translates the diffraction pattern by the specified amount in kx and\nky. Note: this does not yet fully propogate the change through all the\nvariables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">D_kx</span>, </span><span class=\"param\"><span class=\"n\">D_ky</span>, </span><span class=\"param\"><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">293</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "shem_spot_profile.SpotProfile.identify_peaks", "modulename": "shem_spot_profile", "qualname": "SpotProfile.identify_peaks", "kind": "function", "doc": "<p>Identifies initial guesses of the diffraction peak locations in the\ndata set. By default plots these on an interpolated plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interpolation_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();